import { InputCollector } from '../input';
import { Superhero } from '../../db/entities/Superhero';
import { specialties, departments } from '../../core/fict';

const specialtiesList = Object.keys(specialties);

const collector = InputCollector.create()
  .collect({
    key: 'specialty',
    validator: (value) => specialtiesList.includes(value),
    enter: (ctx) => ctx.reply('–ù–∞ –∫–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—ã —É—á–∏—à—å—Å—è?', { 
      reply_markup: { 
        one_time_keyboard: true,
        resize_keyboard: true,
        keyboard: [specialtiesList.map(s => ({ text: s })), [{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å' }]],
      },
    }),
    error: async (ctx, retry) => {
      await ctx.reply('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...');
      retry();
    }
  })
  .collect({
    key: 'department',
    validator: (value, ctx) => {
      const { specialty } = ctx.scene.state.input;
      return specialties[specialty].departments.includes(value);
    },
    enter: (ctx) => ctx.reply('–ê –Ω–∞ –∫–∞–∫–æ–π –∫–∞—Ñ–µ–¥—Ä–µ?', {
      reply_markup: { 
        one_time_keyboard: true,
        resize_keyboard: true,
        keyboard: [specialties[ctx.scene.state.input.specialty].departments.map(d => ({ text: d })), [{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å' }]],
      },
    }),
    error: async (ctx, retry) => {
      await ctx.reply('–¢–∞–∫–æ–π –∫–∞—Ñ–µ–¥—Ä—ã –Ω–µ—Ç –Ω–∞ —Ç–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...');
      retry();
    },
  })
  .collect({
    key: 'year',
    validator: (value) => {
      const num = parseInt(value);
      return Number.isInteger(num) && num > 0 && num < 7;
    },
    enter: (ctx) => ctx.reply('–ù–∞ –∫–∞–∫–æ–º —Ç—ã —Å–µ–π—á–∞—Å –∫—É—Ä—Å–µ?', {
      reply_markup: { 
        one_time_keyboard: true,
        resize_keyboard: true,
        keyboard: [[{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å' }]],
      },
    }),
    error: async (ctx, retry) => {
      await ctx.reply('–ù–µ –º–æ–∂–µ—Ç —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å...');
      retry();
    },
  })
  .collect({
    key: 'ok',
    validator: (value) => value === '–î–∞' || value === '–ù–µ—Ç',
    enter: (ctx) => {
      const { specialty, department, year } = ctx.scene.state.input;

      const text = [
        `<b>${specialties[specialty].name} (${specialty})</b>`,
        `<b>${departments[department].name} (${department})</b>`,
        `<b>${year} –∫—É—Ä—Å</b>\n`,
        `–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?`,
      ].join('\n');
      
      ctx.reply(text, {
        parse_mode: 'HTML',
        reply_markup: { 
          one_time_keyboard: true,
          resize_keyboard: true,
          keyboard: [[{ text: '–î–∞' }, { text: '–ù–µ—Ç' }], [{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å' }]],
        },
      })
    },
    error: async (ctx, retry) => {
      await ctx.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é...');
      retry();
    }
  })
  .finish(async (ctx, data) => {
    const { specialty, department, year, ok } = data;

    if (ok != '–î–∞') {
      ctx.scene.state.input = {};
      ctx.scene.state.step = 0;
      ctx.scene.enter('besuperhero');
      return;
    }

    const u = ctx.from;
    await Superhero.create({
      user_id: u.id,
      username: u.username,
      first_name: u.first_name,
      last_name: u.last_name,
      specialty,
      department,
      studyYear: parseInt(year),
    }).save();

    ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã - —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π ü§ó', { reply_markup: await ctx.getKeyboardMarkup() });
  });

export const scene = collector.toScene('besuperhero');