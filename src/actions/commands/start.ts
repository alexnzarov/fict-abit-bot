import { Middleware } from "telegraf";
import { IContextMessage } from "../../core/context";

const startText = [
  '<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º.</b>\n',
  '–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤. –ú–æ–∂–µ—à—å —Ç–∞–∫ –∂–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö.\n',
  '<i>–ù–µ –∑–ª–∏—Å—å, –µ—Å–ª–∏ —è —á—Ç–æ-—Ç–æ –Ω–µ –±—É–¥—É –ø–æ–Ω–∏–º–∞—Ç—å, —è –≤—Å—ë –µ—â—ë —É—á—É—Å—å üòä</i>'
].join('\n');

export default (): Middleware<IContextMessage> => async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply(startText, { parse_mode: 'HTML', reply_to_message_id: ctx.message.message_id });
    return;
  }
};
